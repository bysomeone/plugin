// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package calculator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// calculator 合约交易行为总类型
type CalculatorAction struct {
	// Types that are valid to be assigned to Value:
	//	*CalculatorAction_Add
	//	*CalculatorAction_Sub
	//	*CalculatorAction_Mul
	//	*CalculatorAction_Div
	Value                isCalculatorAction_Value `protobuf_oneof:"value"`
	Ty                   int32                    `protobuf:"varint,5,opt,name=ty,proto3" json:"ty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CalculatorAction) Reset()         { *m = CalculatorAction{} }
func (m *CalculatorAction) String() string { return proto.CompactTextString(m) }
func (*CalculatorAction) ProtoMessage()    {}
func (*CalculatorAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{0}
}
func (m *CalculatorAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorAction.Unmarshal(m, b)
}
func (m *CalculatorAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorAction.Marshal(b, m, deterministic)
}
func (dst *CalculatorAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorAction.Merge(dst, src)
}
func (m *CalculatorAction) XXX_Size() int {
	return xxx_messageInfo_CalculatorAction.Size(m)
}
func (m *CalculatorAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorAction.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorAction proto.InternalMessageInfo

type isCalculatorAction_Value interface {
	isCalculatorAction_Value()
}

type CalculatorAction_Add struct {
	Add *Add `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type CalculatorAction_Sub struct {
	Sub *Subtract `protobuf:"bytes,2,opt,name=sub,proto3,oneof"`
}

type CalculatorAction_Mul struct {
	Mul *Multiply `protobuf:"bytes,3,opt,name=mul,proto3,oneof"`
}

type CalculatorAction_Div struct {
	Div *Divide `protobuf:"bytes,4,opt,name=div,proto3,oneof"`
}

func (*CalculatorAction_Add) isCalculatorAction_Value() {}

func (*CalculatorAction_Sub) isCalculatorAction_Value() {}

func (*CalculatorAction_Mul) isCalculatorAction_Value() {}

func (*CalculatorAction_Div) isCalculatorAction_Value() {}

func (m *CalculatorAction) GetValue() isCalculatorAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CalculatorAction) GetAdd() *Add {
	if x, ok := m.GetValue().(*CalculatorAction_Add); ok {
		return x.Add
	}
	return nil
}

func (m *CalculatorAction) GetSub() *Subtract {
	if x, ok := m.GetValue().(*CalculatorAction_Sub); ok {
		return x.Sub
	}
	return nil
}

func (m *CalculatorAction) GetMul() *Multiply {
	if x, ok := m.GetValue().(*CalculatorAction_Mul); ok {
		return x.Mul
	}
	return nil
}

func (m *CalculatorAction) GetDiv() *Divide {
	if x, ok := m.GetValue().(*CalculatorAction_Div); ok {
		return x.Div
	}
	return nil
}

func (m *CalculatorAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CalculatorAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CalculatorAction_OneofMarshaler, _CalculatorAction_OneofUnmarshaler, _CalculatorAction_OneofSizer, []interface{}{
		(*CalculatorAction_Add)(nil),
		(*CalculatorAction_Sub)(nil),
		(*CalculatorAction_Mul)(nil),
		(*CalculatorAction_Div)(nil),
	}
}

func _CalculatorAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CalculatorAction)
	// value
	switch x := m.Value.(type) {
	case *CalculatorAction_Add:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Add); err != nil {
			return err
		}
	case *CalculatorAction_Sub:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sub); err != nil {
			return err
		}
	case *CalculatorAction_Mul:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mul); err != nil {
			return err
		}
	case *CalculatorAction_Div:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Div); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CalculatorAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CalculatorAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CalculatorAction)
	switch tag {
	case 1: // value.add
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Add)
		err := b.DecodeMessage(msg)
		m.Value = &CalculatorAction_Add{msg}
		return true, err
	case 2: // value.sub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subtract)
		err := b.DecodeMessage(msg)
		m.Value = &CalculatorAction_Sub{msg}
		return true, err
	case 3: // value.mul
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Multiply)
		err := b.DecodeMessage(msg)
		m.Value = &CalculatorAction_Mul{msg}
		return true, err
	case 4: // value.div
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Divide)
		err := b.DecodeMessage(msg)
		m.Value = &CalculatorAction_Div{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CalculatorAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CalculatorAction)
	// value
	switch x := m.Value.(type) {
	case *CalculatorAction_Add:
		s := proto.Size(x.Add)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CalculatorAction_Sub:
		s := proto.Size(x.Sub)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CalculatorAction_Mul:
		s := proto.Size(x.Mul)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CalculatorAction_Div:
		s := proto.Size(x.Div)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Add struct {
	Summand              int32    `protobuf:"varint,1,opt,name=summand,proto3" json:"summand,omitempty"`
	Addend               int32    `protobuf:"varint,2,opt,name=addend,proto3" json:"addend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Add) Reset()         { *m = Add{} }
func (m *Add) String() string { return proto.CompactTextString(m) }
func (*Add) ProtoMessage()    {}
func (*Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{1}
}
func (m *Add) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Add.Unmarshal(m, b)
}
func (m *Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Add.Marshal(b, m, deterministic)
}
func (dst *Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Add.Merge(dst, src)
}
func (m *Add) XXX_Size() int {
	return xxx_messageInfo_Add.Size(m)
}
func (m *Add) XXX_DiscardUnknown() {
	xxx_messageInfo_Add.DiscardUnknown(m)
}

var xxx_messageInfo_Add proto.InternalMessageInfo

func (m *Add) GetSummand() int32 {
	if m != nil {
		return m.Summand
	}
	return 0
}

func (m *Add) GetAddend() int32 {
	if m != nil {
		return m.Addend
	}
	return 0
}

type AddLog struct {
	Sum                  int32    `protobuf:"varint,1,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLog) Reset()         { *m = AddLog{} }
func (m *AddLog) String() string { return proto.CompactTextString(m) }
func (*AddLog) ProtoMessage()    {}
func (*AddLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{2}
}
func (m *AddLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddLog.Unmarshal(m, b)
}
func (m *AddLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddLog.Marshal(b, m, deterministic)
}
func (dst *AddLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLog.Merge(dst, src)
}
func (m *AddLog) XXX_Size() int {
	return xxx_messageInfo_AddLog.Size(m)
}
func (m *AddLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLog.DiscardUnknown(m)
}

var xxx_messageInfo_AddLog proto.InternalMessageInfo

func (m *AddLog) GetSum() int32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

type Subtract struct {
	Minuend              int32    `protobuf:"varint,1,opt,name=minuend,proto3" json:"minuend,omitempty"`
	Subtrahend           int32    `protobuf:"varint,2,opt,name=subtrahend,proto3" json:"subtrahend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subtract) Reset()         { *m = Subtract{} }
func (m *Subtract) String() string { return proto.CompactTextString(m) }
func (*Subtract) ProtoMessage()    {}
func (*Subtract) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{3}
}
func (m *Subtract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subtract.Unmarshal(m, b)
}
func (m *Subtract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subtract.Marshal(b, m, deterministic)
}
func (dst *Subtract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subtract.Merge(dst, src)
}
func (m *Subtract) XXX_Size() int {
	return xxx_messageInfo_Subtract.Size(m)
}
func (m *Subtract) XXX_DiscardUnknown() {
	xxx_messageInfo_Subtract.DiscardUnknown(m)
}

var xxx_messageInfo_Subtract proto.InternalMessageInfo

func (m *Subtract) GetMinuend() int32 {
	if m != nil {
		return m.Minuend
	}
	return 0
}

func (m *Subtract) GetSubtrahend() int32 {
	if m != nil {
		return m.Subtrahend
	}
	return 0
}

type SubLog struct {
	Remainder            int32    `protobuf:"varint,1,opt,name=remainder,proto3" json:"remainder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubLog) Reset()         { *m = SubLog{} }
func (m *SubLog) String() string { return proto.CompactTextString(m) }
func (*SubLog) ProtoMessage()    {}
func (*SubLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{4}
}
func (m *SubLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubLog.Unmarshal(m, b)
}
func (m *SubLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubLog.Marshal(b, m, deterministic)
}
func (dst *SubLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubLog.Merge(dst, src)
}
func (m *SubLog) XXX_Size() int {
	return xxx_messageInfo_SubLog.Size(m)
}
func (m *SubLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SubLog.DiscardUnknown(m)
}

var xxx_messageInfo_SubLog proto.InternalMessageInfo

func (m *SubLog) GetRemainder() int32 {
	if m != nil {
		return m.Remainder
	}
	return 0
}

type Multiply struct {
	Faciend              int32    `protobuf:"varint,1,opt,name=faciend,proto3" json:"faciend,omitempty"`
	Multiplier           int32    `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Multiply) Reset()         { *m = Multiply{} }
func (m *Multiply) String() string { return proto.CompactTextString(m) }
func (*Multiply) ProtoMessage()    {}
func (*Multiply) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{5}
}
func (m *Multiply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Multiply.Unmarshal(m, b)
}
func (m *Multiply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Multiply.Marshal(b, m, deterministic)
}
func (dst *Multiply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multiply.Merge(dst, src)
}
func (m *Multiply) XXX_Size() int {
	return xxx_messageInfo_Multiply.Size(m)
}
func (m *Multiply) XXX_DiscardUnknown() {
	xxx_messageInfo_Multiply.DiscardUnknown(m)
}

var xxx_messageInfo_Multiply proto.InternalMessageInfo

func (m *Multiply) GetFaciend() int32 {
	if m != nil {
		return m.Faciend
	}
	return 0
}

func (m *Multiply) GetMultiplier() int32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

type MultiplyLog struct {
	Product              int32    `protobuf:"varint,1,opt,name=product,proto3" json:"product,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiplyLog) Reset()         { *m = MultiplyLog{} }
func (m *MultiplyLog) String() string { return proto.CompactTextString(m) }
func (*MultiplyLog) ProtoMessage()    {}
func (*MultiplyLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{6}
}
func (m *MultiplyLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiplyLog.Unmarshal(m, b)
}
func (m *MultiplyLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiplyLog.Marshal(b, m, deterministic)
}
func (dst *MultiplyLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiplyLog.Merge(dst, src)
}
func (m *MultiplyLog) XXX_Size() int {
	return xxx_messageInfo_MultiplyLog.Size(m)
}
func (m *MultiplyLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiplyLog.DiscardUnknown(m)
}

var xxx_messageInfo_MultiplyLog proto.InternalMessageInfo

func (m *MultiplyLog) GetProduct() int32 {
	if m != nil {
		return m.Product
	}
	return 0
}

type Divide struct {
	Dividend             int32    `protobuf:"varint,1,opt,name=dividend,proto3" json:"dividend,omitempty"`
	Divisor              int32    `protobuf:"varint,2,opt,name=divisor,proto3" json:"divisor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Divide) Reset()         { *m = Divide{} }
func (m *Divide) String() string { return proto.CompactTextString(m) }
func (*Divide) ProtoMessage()    {}
func (*Divide) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{7}
}
func (m *Divide) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Divide.Unmarshal(m, b)
}
func (m *Divide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Divide.Marshal(b, m, deterministic)
}
func (dst *Divide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divide.Merge(dst, src)
}
func (m *Divide) XXX_Size() int {
	return xxx_messageInfo_Divide.Size(m)
}
func (m *Divide) XXX_DiscardUnknown() {
	xxx_messageInfo_Divide.DiscardUnknown(m)
}

var xxx_messageInfo_Divide proto.InternalMessageInfo

func (m *Divide) GetDividend() int32 {
	if m != nil {
		return m.Dividend
	}
	return 0
}

func (m *Divide) GetDivisor() int32 {
	if m != nil {
		return m.Divisor
	}
	return 0
}

type DivideLog struct {
	Quotient             int32    `protobuf:"varint,1,opt,name=quotient,proto3" json:"quotient,omitempty"`
	Remain               int32    `protobuf:"varint,2,opt,name=remain,proto3" json:"remain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DivideLog) Reset()         { *m = DivideLog{} }
func (m *DivideLog) String() string { return proto.CompactTextString(m) }
func (*DivideLog) ProtoMessage()    {}
func (*DivideLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{8}
}
func (m *DivideLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DivideLog.Unmarshal(m, b)
}
func (m *DivideLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DivideLog.Marshal(b, m, deterministic)
}
func (dst *DivideLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivideLog.Merge(dst, src)
}
func (m *DivideLog) XXX_Size() int {
	return xxx_messageInfo_DivideLog.Size(m)
}
func (m *DivideLog) XXX_DiscardUnknown() {
	xxx_messageInfo_DivideLog.DiscardUnknown(m)
}

var xxx_messageInfo_DivideLog proto.InternalMessageInfo

func (m *DivideLog) GetQuotient() int32 {
	if m != nil {
		return m.Quotient
	}
	return 0
}

func (m *DivideLog) GetRemain() int32 {
	if m != nil {
		return m.Remain
	}
	return 0
}

type ReqQueryCalcCount struct {
	Action               string   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqQueryCalcCount) Reset()         { *m = ReqQueryCalcCount{} }
func (m *ReqQueryCalcCount) String() string { return proto.CompactTextString(m) }
func (*ReqQueryCalcCount) ProtoMessage()    {}
func (*ReqQueryCalcCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{9}
}
func (m *ReqQueryCalcCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqQueryCalcCount.Unmarshal(m, b)
}
func (m *ReqQueryCalcCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqQueryCalcCount.Marshal(b, m, deterministic)
}
func (dst *ReqQueryCalcCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqQueryCalcCount.Merge(dst, src)
}
func (m *ReqQueryCalcCount) XXX_Size() int {
	return xxx_messageInfo_ReqQueryCalcCount.Size(m)
}
func (m *ReqQueryCalcCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqQueryCalcCount.DiscardUnknown(m)
}

var xxx_messageInfo_ReqQueryCalcCount proto.InternalMessageInfo

func (m *ReqQueryCalcCount) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type ReplyQueryCalcCount struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyQueryCalcCount) Reset()         { *m = ReplyQueryCalcCount{} }
func (m *ReplyQueryCalcCount) String() string { return proto.CompactTextString(m) }
func (*ReplyQueryCalcCount) ProtoMessage()    {}
func (*ReplyQueryCalcCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_2ab912d181709595, []int{10}
}
func (m *ReplyQueryCalcCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyQueryCalcCount.Unmarshal(m, b)
}
func (m *ReplyQueryCalcCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyQueryCalcCount.Marshal(b, m, deterministic)
}
func (dst *ReplyQueryCalcCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyQueryCalcCount.Merge(dst, src)
}
func (m *ReplyQueryCalcCount) XXX_Size() int {
	return xxx_messageInfo_ReplyQueryCalcCount.Size(m)
}
func (m *ReplyQueryCalcCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyQueryCalcCount.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyQueryCalcCount proto.InternalMessageInfo

func (m *ReplyQueryCalcCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*CalculatorAction)(nil), "calculator.CalculatorAction")
	proto.RegisterType((*Add)(nil), "calculator.Add")
	proto.RegisterType((*AddLog)(nil), "calculator.AddLog")
	proto.RegisterType((*Subtract)(nil), "calculator.Subtract")
	proto.RegisterType((*SubLog)(nil), "calculator.SubLog")
	proto.RegisterType((*Multiply)(nil), "calculator.Multiply")
	proto.RegisterType((*MultiplyLog)(nil), "calculator.MultiplyLog")
	proto.RegisterType((*Divide)(nil), "calculator.Divide")
	proto.RegisterType((*DivideLog)(nil), "calculator.DivideLog")
	proto.RegisterType((*ReqQueryCalcCount)(nil), "calculator.ReqQueryCalcCount")
	proto.RegisterType((*ReplyQueryCalcCount)(nil), "calculator.ReplyQueryCalcCount")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	QueryCalcCount(ctx context.Context, in *ReqQueryCalcCount, opts ...grpc.CallOption) (*ReplyQueryCalcCount, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) QueryCalcCount(ctx context.Context, in *ReqQueryCalcCount, opts ...grpc.CallOption) (*ReplyQueryCalcCount, error) {
	out := new(ReplyQueryCalcCount)
	err := c.cc.Invoke(ctx, "/calculator.calculator/QueryCalcCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	QueryCalcCount(context.Context, *ReqQueryCalcCount) (*ReplyQueryCalcCount, error)
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_QueryCalcCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqQueryCalcCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).QueryCalcCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.calculator/QueryCalcCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).QueryCalcCount(ctx, req.(*ReqQueryCalcCount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCalcCount",
			Handler:    _Calculator_QueryCalcCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_calculator_2ab912d181709595) }

var fileDescriptor_calculator_2ab912d181709595 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xbb, 0x1b, 0x92, 0xdd, 0x9d, 0x4a, 0x65, 0x31, 0x15, 0x8a, 0x56, 0xfc, 0xa9, 0x8c,
	0x54, 0x56, 0xaa, 0xd4, 0x43, 0x39, 0x70, 0x03, 0x2d, 0xed, 0x81, 0x03, 0x1c, 0x48, 0x5f, 0x00,
	0x27, 0x63, 0xc0, 0x52, 0x12, 0x6f, 0x13, 0x7b, 0xa5, 0xbc, 0x23, 0x0f, 0x85, 0x26, 0xb6, 0x93,
	0xb4, 0x7b, 0xf3, 0xe7, 0x7c, 0xf3, 0xfd, 0x3c, 0xa3, 0x09, 0xac, 0x0b, 0x51, 0x16, 0xb6, 0x14,
	0x46, 0x37, 0xd7, 0xfb, 0x46, 0x1b, 0xcd, 0x60, 0xbc, 0xe1, 0xff, 0x66, 0xb0, 0xbe, 0x1d, 0xe4,
	0xae, 0x30, 0x4a, 0xd7, 0xec, 0x3d, 0x44, 0x02, 0x31, 0x9d, 0x5d, 0xcc, 0xb6, 0xa7, 0x37, 0xcf,
	0xaf, 0x27, 0x01, 0x3b, 0xc4, 0x6f, 0x27, 0x19, 0x7d, 0x65, 0x5b, 0x88, 0x5a, 0x9b, 0xa7, 0xf3,
	0xde, 0x74, 0x3e, 0x35, 0xdd, 0xdb, 0xdc, 0x34, 0xa2, 0x30, 0xe4, 0x6c, 0x6d, 0x4e, 0xce, 0xca,
	0x96, 0x69, 0x74, 0xec, 0xfc, 0x61, 0x4b, 0xa3, 0xf6, 0x65, 0x47, 0xce, 0xca, 0x96, 0xec, 0x12,
	0x22, 0x54, 0x87, 0xf4, 0x59, 0xef, 0x64, 0x53, 0xe7, 0x9d, 0x3a, 0x28, 0x94, 0xe4, 0x43, 0x75,
	0x60, 0x67, 0x30, 0x37, 0x5d, 0x1a, 0x5f, 0xcc, 0xb6, 0x71, 0x36, 0x37, 0xdd, 0xd7, 0x05, 0xc4,
	0x07, 0x51, 0x5a, 0xc9, 0x3f, 0x41, 0xb4, 0x43, 0x64, 0x29, 0x2c, 0x5a, 0x5b, 0x55, 0xa2, 0x76,
	0x4d, 0xc4, 0x59, 0x90, 0xec, 0x15, 0x24, 0x02, 0x51, 0xd6, 0xd8, 0x3f, 0x3c, 0xce, 0xbc, 0xe2,
	0x1b, 0x48, 0x76, 0x88, 0xdf, 0xf5, 0x1f, 0xb6, 0xa6, 0xbe, 0x2a, 0x5f, 0x47, 0x47, 0x7e, 0x07,
	0xcb, 0xd0, 0x12, 0x25, 0x57, 0xaa, 0xb6, 0x72, 0x4c, 0xf6, 0x92, 0xbd, 0x05, 0x68, 0x7b, 0xd7,
	0xdf, 0x31, 0x7d, 0x72, 0xc3, 0x2f, 0x21, 0xb9, 0xb7, 0x39, 0x11, 0x5e, 0xc3, 0xaa, 0x91, 0x95,
	0x50, 0x35, 0xca, 0xc6, 0xa7, 0x8c, 0x17, 0x44, 0x0b, 0x63, 0x21, 0xda, 0x6f, 0x51, 0xa8, 0x09,
	0xcd, 0x4b, 0xa2, 0x55, 0xce, 0xa5, 0x64, 0x13, 0x68, 0xe3, 0x0d, 0xff, 0x00, 0xa7, 0x21, 0x85,
	0x90, 0x29, 0x2c, 0xf6, 0x8d, 0x46, 0x5b, 0x98, 0x10, 0xe4, 0x25, 0xff, 0x0c, 0x89, 0x9b, 0x2d,
	0xdb, 0xc0, 0x12, 0xfb, 0xd3, 0x40, 0x1b, 0x34, 0xd5, 0xd3, 0xb9, 0xd5, 0x81, 0x15, 0x24, 0xff,
	0x02, 0x2b, 0x57, 0x4f, 0x98, 0x0d, 0x2c, 0x1f, 0xac, 0x36, 0x4a, 0xd6, 0x81, 0x33, 0x68, 0x9a,
	0xbc, 0x6b, 0x32, 0x4c, 0xde, 0x29, 0x7e, 0x05, 0x2f, 0x32, 0xf9, 0xf0, 0xd3, 0xca, 0xa6, 0xa3,
	0x45, 0xbc, 0xd5, 0xd6, 0x99, 0x45, 0xbf, 0x8b, 0x7d, 0xcc, 0x2a, 0xf3, 0x8a, 0x5f, 0xc1, 0xcb,
	0x4c, 0xee, 0xcb, 0xee, 0x89, 0xfd, 0x1c, 0xe2, 0x82, 0x0e, 0x1e, 0xea, 0xc4, 0xcd, 0x2f, 0x98,
	0x6c, 0x3a, 0xcb, 0xe0, 0xec, 0x49, 0xd5, 0x9b, 0xe9, 0x82, 0x1d, 0xbd, 0x61, 0xf3, 0xee, 0xf1,
	0xe7, 0x23, 0x2a, 0x3f, 0xc9, 0x93, 0xfe, 0x87, 0xfa, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x23, 0x70, 0xec, 0x64, 0x03, 0x00, 0x00,
}
