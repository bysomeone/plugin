// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.1
// source: lightclient.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightclientAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty int32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are assignable to Value:
	//	*LightclientAction_Headers
	Value isLightclientAction_Value `protobuf_oneof:"value"`
}

func (x *LightclientAction) Reset() {
	*x = LightclientAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightclientAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightclientAction) ProtoMessage() {}

func (x *LightclientAction) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightclientAction.ProtoReflect.Descriptor instead.
func (*LightclientAction) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{0}
}

func (x *LightclientAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (m *LightclientAction) GetValue() isLightclientAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LightclientAction) GetHeaders() *CommitHeaders {
	if x, ok := x.GetValue().(*LightclientAction_Headers); ok {
		return x.Headers
	}
	return nil
}

type isLightclientAction_Value interface {
	isLightclientAction_Value()
}

type LightclientAction_Headers struct {
	Headers *CommitHeaders `protobuf:"bytes,2,opt,name=headers,proto3,oneof"`
}

func (*LightclientAction_Headers) isLightclientAction_Value() {}

type CommitHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitHeaders) Reset() {
	*x = CommitHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitHeaders) ProtoMessage() {}

func (x *CommitHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitHeaders.ProtoReflect.Descriptor instead.
func (*CommitHeaders) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{1}
}

type CommitHeadersLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitHeadersLog) Reset() {
	*x = CommitHeadersLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitHeadersLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitHeadersLog) ProtoMessage() {}

func (x *CommitHeadersLog) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitHeadersLog.ProtoReflect.Descriptor instead.
func (*CommitHeadersLog) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{2}
}

var File_lightclient_proto protoreflect.FileDescriptor

var file_lightclient_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x11, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79, 0x12,
	0x30, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x32,
	0x0d, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x0a,
	0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_lightclient_proto_rawDescOnce sync.Once
	file_lightclient_proto_rawDescData = file_lightclient_proto_rawDesc
)

func file_lightclient_proto_rawDescGZIP() []byte {
	file_lightclient_proto_rawDescOnce.Do(func() {
		file_lightclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightclient_proto_rawDescData)
	})
	return file_lightclient_proto_rawDescData
}

var file_lightclient_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_lightclient_proto_goTypes = []interface{}{
	(*LightclientAction)(nil), // 0: types.LightclientAction
	(*CommitHeaders)(nil),     // 1: types.CommitHeaders
	(*CommitHeadersLog)(nil),  // 2: types.CommitHeadersLog
}
var file_lightclient_proto_depIdxs = []int32{
	1, // 0: types.LightclientAction.headers:type_name -> types.CommitHeaders
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_lightclient_proto_init() }
func file_lightclient_proto_init() {
	if File_lightclient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lightclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightclientAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitHeadersLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lightclient_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LightclientAction_Headers)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lightclient_proto_goTypes,
		DependencyIndexes: file_lightclient_proto_depIdxs,
		MessageInfos:      file_lightclient_proto_msgTypes,
	}.Build()
	File_lightclient_proto = out.File
	file_lightclient_proto_rawDesc = nil
	file_lightclient_proto_goTypes = nil
	file_lightclient_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LightclientClient is the client API for Lightclient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightclientClient interface {
}

type lightclientClient struct {
	cc grpc.ClientConnInterface
}

func NewLightclientClient(cc grpc.ClientConnInterface) LightclientClient {
	return &lightclientClient{cc}
}

// LightclientServer is the server API for Lightclient service.
type LightclientServer interface {
}

// UnimplementedLightclientServer can be embedded to have forward compatible implementations.
type UnimplementedLightclientServer struct {
}

func RegisterLightclientServer(s *grpc.Server, srv LightclientServer) {
	s.RegisterService(&_Lightclient_serviceDesc, srv)
}

var _Lightclient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.lightclient",
	HandlerType: (*LightclientServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "lightclient.proto",
}
