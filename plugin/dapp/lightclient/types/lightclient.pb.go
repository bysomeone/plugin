// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.1
// source: lightclient.proto

package types

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightClientAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty int32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are assignable to Value:
	//	*LightClientAction_BtcHeaders
	Value isLightClientAction_Value `protobuf_oneof:"value"`
}

func (x *LightClientAction) Reset() {
	*x = LightClientAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightClientAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightClientAction) ProtoMessage() {}

func (x *LightClientAction) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightClientAction.ProtoReflect.Descriptor instead.
func (*LightClientAction) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{0}
}

func (x *LightClientAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (m *LightClientAction) GetValue() isLightClientAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LightClientAction) GetBtcHeaders() *BtcHeaders {
	if x, ok := x.GetValue().(*LightClientAction_BtcHeaders); ok {
		return x.BtcHeaders
	}
	return nil
}

type isLightClientAction_Value interface {
	isLightClientAction_Value()
}

type LightClientAction_BtcHeaders struct {
	BtcHeaders *BtcHeaders `protobuf:"bytes,2,opt,name=btcHeaders,proto3,oneof"`
}

func (*LightClientAction_BtcHeaders) isLightClientAction_Value() {}

type BtcHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Confirmations uint64 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Version       uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	MerkleRoot    string `protobuf:"bytes,5,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	Time          int64  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Nonce         uint64 `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits          int64  `protobuf:"varint,8,opt,name=bits,proto3" json:"bits,omitempty"`
	Difficulty    int64  `protobuf:"varint,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	PreviousHash  string `protobuf:"bytes,10,opt,name=previousHash,proto3" json:"previousHash,omitempty"`
	NextHash      string `protobuf:"bytes,11,opt,name=nextHash,proto3" json:"nextHash,omitempty"`
}

func (x *BtcHeader) Reset() {
	*x = BtcHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcHeader) ProtoMessage() {}

func (x *BtcHeader) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcHeader.ProtoReflect.Descriptor instead.
func (*BtcHeader) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{1}
}

func (x *BtcHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BtcHeader) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *BtcHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BtcHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BtcHeader) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *BtcHeader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BtcHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BtcHeader) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *BtcHeader) GetDifficulty() int64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *BtcHeader) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *BtcHeader) GetNextHash() string {
	if x != nil {
		return x.NextHash
	}
	return ""
}

type BtcHeadersLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmations uint64 `protobuf:"varint,1,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	LastHeight    uint64 `protobuf:"varint,2,opt,name=lastHeight,proto3" json:"lastHeight,omitempty"`
	CommitHeight  uint64 `protobuf:"varint,3,opt,name=commitHeight,proto3" json:"commitHeight,omitempty"`
	LastHash      string `protobuf:"bytes,4,opt,name=lastHash,proto3" json:"lastHash,omitempty"`
	CommitHash    string `protobuf:"bytes,5,opt,name=commitHash,proto3" json:"commitHash,omitempty"`
}

func (x *BtcHeadersLog) Reset() {
	*x = BtcHeadersLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcHeadersLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcHeadersLog) ProtoMessage() {}

func (x *BtcHeadersLog) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcHeadersLog.ProtoReflect.Descriptor instead.
func (*BtcHeadersLog) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{2}
}

func (x *BtcHeadersLog) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *BtcHeadersLog) GetLastHeight() uint64 {
	if x != nil {
		return x.LastHeight
	}
	return 0
}

func (x *BtcHeadersLog) GetCommitHeight() uint64 {
	if x != nil {
		return x.CommitHeight
	}
	return 0
}

func (x *BtcHeadersLog) GetLastHash() string {
	if x != nil {
		return x.LastHash
	}
	return ""
}

func (x *BtcHeadersLog) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type BtcHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*BtcHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *BtcHeaders) Reset() {
	*x = BtcHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcHeaders) ProtoMessage() {}

func (x *BtcHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcHeaders.ProtoReflect.Descriptor instead.
func (*BtcHeaders) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{3}
}

func (x *BtcHeaders) GetHeaders() []*BtcHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type BtcTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash          string  `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHeight   uint64  `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Vin           []*Vin  `protobuf:"bytes,3,rep,name=vin,proto3" json:"vin,omitempty"`
	Vout          []*Vout `protobuf:"bytes,4,rep,name=vout,proto3" json:"vout,omitempty"`
	Time          int64   `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Confirmations uint64  `protobuf:"varint,6,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *BtcTransaction) Reset() {
	*x = BtcTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcTransaction) ProtoMessage() {}

func (x *BtcTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcTransaction.ProtoReflect.Descriptor instead.
func (*BtcTransaction) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{4}
}

func (x *BtcTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BtcTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BtcTransaction) GetVin() []*Vin {
	if x != nil {
		return x.Vin
	}
	return nil
}

func (x *BtcTransaction) GetVout() []*Vout {
	if x != nil {
		return x.Vout
	}
	return nil
}

func (x *BtcTransaction) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BtcTransaction) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

type Vin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Value   uint64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Vin) Reset() {
	*x = Vin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vin) ProtoMessage() {}

func (x *Vin) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vin.ProtoReflect.Descriptor instead.
func (*Vin) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{5}
}

func (x *Vin) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vin) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Vout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coinbase bool   `protobuf:"varint,1,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Value    uint64 `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Vout) Reset() {
	*x = Vout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vout) ProtoMessage() {}

func (x *Vout) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vout.ProtoReflect.Descriptor instead.
func (*Vout) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{6}
}

func (x *Vout) GetCoinbase() bool {
	if x != nil {
		return x.Coinbase
	}
	return false
}

func (x *Vout) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vout) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BtcSpv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      string   `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Time        int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Height      uint64   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash   string   `protobuf:"bytes,4,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	TxIndex     uint32   `protobuf:"varint,5,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	BranchProof [][]byte `protobuf:"bytes,6,rep,name=branchProof,proto3" json:"branchProof,omitempty"`
}

func (x *BtcSpv) Reset() {
	*x = BtcSpv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcSpv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcSpv) ProtoMessage() {}

func (x *BtcSpv) ProtoReflect() protoreflect.Message {
	mi := &file_lightclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcSpv.ProtoReflect.Descriptor instead.
func (*BtcSpv) Descriptor() ([]byte, []int) {
	return file_lightclient_proto_rawDescGZIP(), []int{7}
}

func (x *BtcSpv) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *BtcSpv) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BtcSpv) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BtcSpv) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BtcSpv) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *BtcSpv) GetBranchProof() [][]byte {
	if x != nil {
		return x.BranchProof
	}
	return nil
}

var File_lightclient_proto protoreflect.FileDescriptor

var file_lightclient_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79, 0x12,
	0x33, 0x0a, 0x0a, 0x62, 0x74, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x74, 0x63, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x74, 0x63, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x02,
	0x0a, 0x09, 0x42, 0x74, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x42, 0x74, 0x63, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x38, 0x0a,
	0x0a, 0x42, 0x74, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x74, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x42, 0x74, 0x63, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x03, 0x56, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x52, 0x0a, 0x04, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x42, 0x74, 0x63, 0x53, 0x70, 0x76, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x32, 0x0d, 0x0a,
	0x0b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lightclient_proto_rawDescOnce sync.Once
	file_lightclient_proto_rawDescData = file_lightclient_proto_rawDesc
)

func file_lightclient_proto_rawDescGZIP() []byte {
	file_lightclient_proto_rawDescOnce.Do(func() {
		file_lightclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightclient_proto_rawDescData)
	})
	return file_lightclient_proto_rawDescData
}

var file_lightclient_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_lightclient_proto_goTypes = []interface{}{
	(*LightClientAction)(nil), // 0: types.LightClientAction
	(*BtcHeader)(nil),         // 1: types.BtcHeader
	(*BtcHeadersLog)(nil),     // 2: types.BtcHeadersLog
	(*BtcHeaders)(nil),        // 3: types.BtcHeaders
	(*BtcTransaction)(nil),    // 4: types.BtcTransaction
	(*Vin)(nil),               // 5: types.Vin
	(*Vout)(nil),              // 6: types.Vout
	(*BtcSpv)(nil),            // 7: types.BtcSpv
}
var file_lightclient_proto_depIdxs = []int32{
	3, // 0: types.LightClientAction.btcHeaders:type_name -> types.BtcHeaders
	1, // 1: types.BtcHeaders.headers:type_name -> types.BtcHeader
	5, // 2: types.BtcTransaction.vin:type_name -> types.Vin
	6, // 3: types.BtcTransaction.vout:type_name -> types.Vout
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_lightclient_proto_init() }
func file_lightclient_proto_init() {
	if File_lightclient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lightclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightClientAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcHeadersLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcSpv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lightclient_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LightClientAction_BtcHeaders)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lightclient_proto_goTypes,
		DependencyIndexes: file_lightclient_proto_depIdxs,
		MessageInfos:      file_lightclient_proto_msgTypes,
	}.Build()
	File_lightclient_proto = out.File
	file_lightclient_proto_rawDesc = nil
	file_lightclient_proto_goTypes = nil
	file_lightclient_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LightclientClient is the client API for Lightclient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightclientClient interface {
}

type lightclientClient struct {
	cc grpc.ClientConnInterface
}

func NewLightclientClient(cc grpc.ClientConnInterface) LightclientClient {
	return &lightclientClient{cc}
}

// LightclientServer is the server API for Lightclient service.
type LightclientServer interface {
}

// UnimplementedLightclientServer can be embedded to have forward compatible implementations.
type UnimplementedLightclientServer struct {
}

func RegisterLightclientServer(s *grpc.Server, srv LightclientServer) {
	s.RegisterService(&_Lightclient_serviceDesc, srv)
}

var _Lightclient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Lightclient",
	HandlerType: (*LightclientServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "lightclient.proto",
}
